map[string]*jschema.Schema{
    "Circle": &jschema.Schema{
        Title: "Circle",
        Description: "github.com/ysmood/jschema_test.Circle",
        Default: nil,
        Examples: []jschema.JVal(nil),
        AnyOf: []*jschema.Schema(nil),
        Ref: (*jschema.Ref)(nil),
        Type: "object",
        Enum: []jschema.JVal(nil),
        Properties: jschema.Properties{
            "Radius": &jschema.Schema{
                Title: "",
                Description: "",
                Default: nil,
                Examples: []jschema.JVal(nil),
                AnyOf: []*jschema.Schema(nil),
                Ref: (*jschema.Ref)(nil),
                Type: "number",
                Enum: []jschema.JVal(nil),
                Properties: jschema.Properties(nil),
                PatternProperties: jschema.Properties(nil),
                Format: "",
                Max: (*float64)(nil),
                Min: (*float64)(nil),
                MaxLen: (*float64)(nil),
                MinLen: (*float64)(nil),
                Pattern: "",
                Items: (*jschema.Schema)(nil),
                MinItems: (*int)(nil),
                MaxItems: (*int)(nil),
                Required: jschema.Required(nil),
                AdditionalProperties: (*bool)(nil),
                Defs: jschema.Types(nil),
            },
        },
        PatternProperties: jschema.Properties(nil),
        Format: "",
        Max: (*float64)(nil),
        Min: (*float64)(nil),
        MaxLen: (*float64)(nil),
        MinLen: (*float64)(nil),
        Pattern: "",
        Items: (*jschema.Schema)(nil),
        MinItems: (*int)(nil),
        MaxItems: (*int)(nil),
        Required: jschema.Required{
            "Radius",
        },
        AdditionalProperties: gop.Ptr(false).(*bool),
        Defs: jschema.Types(nil),
    },
    "Data": &jschema.Schema{
        Title: "Data",
        Description: "github.com/ysmood/jschema_test.Data",
        Default: nil,
        Examples: []jschema.JVal(nil),
        AnyOf: []*jschema.Schema(nil),
        Ref: (*jschema.Ref)(nil),
        Type: "object",
        Enum: []jschema.JVal(nil),
        Properties: jschema.Properties{
            "shape": &jschema.Schema{
                Title: "",
                Description: "",
                Default: nil,
                Examples: []jschema.JVal(nil),
                AnyOf: []*jschema.Schema(nil),
                Ref: &jschema.Ref{
                    Defs: "#/$defs",
                    Package: "github.com/ysmood/jschema_test",
                    Name: "Shape",
                    Hash: "ae1cec3fbb3190bd993c3e5a681546a3",
                    ID: "Shape",
                },
                Type: "",
                Enum: []jschema.JVal(nil),
                Properties: jschema.Properties(nil),
                PatternProperties: jschema.Properties(nil),
                Format: "",
                Max: (*float64)(nil),
                Min: (*float64)(nil),
                MaxLen: (*float64)(nil),
                MinLen: (*float64)(nil),
                Pattern: "",
                Items: (*jschema.Schema)(nil),
                MinItems: (*int)(nil),
                MaxItems: (*int)(nil),
                Required: jschema.Required(nil),
                AdditionalProperties: (*bool)(nil),
                Defs: jschema.Types(nil),
            },
        },
        PatternProperties: jschema.Properties(nil),
        Format: "",
        Max: (*float64)(nil),
        Min: (*float64)(nil),
        MaxLen: (*float64)(nil),
        MinLen: (*float64)(nil),
        Pattern: "",
        Items: (*jschema.Schema)(nil),
        MinItems: (*int)(nil),
        MaxItems: (*int)(nil),
        Required: jschema.Required{
            "shape",
        },
        AdditionalProperties: gop.Ptr(false).(*bool),
        Defs: jschema.Types(nil),
    },
    "Rectangle": &jschema.Schema{
        Title: "Rectangle",
        Description: "github.com/ysmood/jschema_test.Rectangle",
        Default: nil,
        Examples: []jschema.JVal(nil),
        AnyOf: []*jschema.Schema(nil),
        Ref: (*jschema.Ref)(nil),
        Type: "object",
        Enum: []jschema.JVal(nil),
        Properties: jschema.Properties{
            "Height": &jschema.Schema{
                Title: "",
                Description: "",
                Default: nil,
                Examples: []jschema.JVal(nil),
                AnyOf: []*jschema.Schema(nil),
                Ref: (*jschema.Ref)(nil),
                Type: "integer",
                Enum: []jschema.JVal(nil),
                Properties: jschema.Properties(nil),
                PatternProperties: jschema.Properties(nil),
                Format: "",
                Max: (*float64)(nil),
                Min: (*float64)(nil),
                MaxLen: (*float64)(nil),
                MinLen: (*float64)(nil),
                Pattern: "",
                Items: (*jschema.Schema)(nil),
                MinItems: (*int)(nil),
                MaxItems: (*int)(nil),
                Required: jschema.Required(nil),
                AdditionalProperties: (*bool)(nil),
                Defs: jschema.Types(nil),
            },
            "Width": &jschema.Schema{
                Title: "",
                Description: "",
                Default: nil,
                Examples: []jschema.JVal(nil),
                AnyOf: []*jschema.Schema(nil),
                Ref: (*jschema.Ref)(nil),
                Type: "integer",
                Enum: []jschema.JVal(nil),
                Properties: jschema.Properties(nil),
                PatternProperties: jschema.Properties(nil),
                Format: "",
                Max: (*float64)(nil),
                Min: (*float64)(nil),
                MaxLen: (*float64)(nil),
                MinLen: (*float64)(nil),
                Pattern: "",
                Items: (*jschema.Schema)(nil),
                MinItems: (*int)(nil),
                MaxItems: (*int)(nil),
                Required: jschema.Required(nil),
                AdditionalProperties: (*bool)(nil),
                Defs: jschema.Types(nil),
            },
        },
        PatternProperties: jschema.Properties(nil),
        Format: "",
        Max: (*float64)(nil),
        Min: (*float64)(nil),
        MaxLen: (*float64)(nil),
        MinLen: (*float64)(nil),
        Pattern: "",
        Items: (*jschema.Schema)(nil),
        MinItems: (*int)(nil),
        MaxItems: (*int)(nil),
        Required: jschema.Required{
            "Width",
            "Height",
        },
        AdditionalProperties: gop.Ptr(false).(*bool),
        Defs: jschema.Types(nil),
    },
    "Shape": &jschema.Schema{
        Title: "Shape",
        Description: "github.com/ysmood/jschema_test.Shape",
        Default: nil,
        Examples: []jschema.JVal(nil),
        AnyOf: []*jschema.Schema{
            &jschema.Schema{
                Title: "",
                Description: "",
                Default: nil,
                Examples: []jschema.JVal(nil),
                AnyOf: []*jschema.Schema(nil),
                Ref: &jschema.Ref{
                    Defs: "#/$defs",
                    Package: "github.com/ysmood/jschema_test",
                    Name: "Circle",
                    Hash: "85853efa617eb1f9ac9460708ba6224a",
                    ID: "Circle",
                },
                Type: "",
                Enum: []jschema.JVal(nil),
                Properties: jschema.Properties(nil),
                PatternProperties: jschema.Properties(nil),
                Format: "",
                Max: (*float64)(nil),
                Min: (*float64)(nil),
                MaxLen: (*float64)(nil),
                MinLen: (*float64)(nil),
                Pattern: "",
                Items: (*jschema.Schema)(nil),
                MinItems: (*int)(nil),
                MaxItems: (*int)(nil),
                Required: jschema.Required(nil),
                AdditionalProperties: (*bool)(nil),
                Defs: jschema.Types(nil),
            },
            &jschema.Schema{
                Title: "",
                Description: "",
                Default: nil,
                Examples: []jschema.JVal(nil),
                AnyOf: []*jschema.Schema(nil),
                Ref: &jschema.Ref{
                    Defs: "#/$defs",
                    Package: "github.com/ysmood/jschema_test",
                    Name: "Rectangle",
                    Hash: "cfdb3ab918abb217a9d59dc14b27031a",
                    ID: "Rectangle",
                },
                Type: "",
                Enum: []jschema.JVal(nil),
                Properties: jschema.Properties(nil),
                PatternProperties: jschema.Properties(nil),
                Format: "",
                Max: (*float64)(nil),
                Min: (*float64)(nil),
                MaxLen: (*float64)(nil),
                MinLen: (*float64)(nil),
                Pattern: "",
                Items: (*jschema.Schema)(nil),
                MinItems: (*int)(nil),
                MaxItems: (*int)(nil),
                Required: jschema.Required(nil),
                AdditionalProperties: (*bool)(nil),
                Defs: jschema.Types(nil),
            },
        },
        Ref: (*jschema.Ref)(nil),
        Type: "",
        Enum: []jschema.JVal(nil),
        Properties: jschema.Properties(nil),
        PatternProperties: jschema.Properties(nil),
        Format: "",
        Max: (*float64)(nil),
        Min: (*float64)(nil),
        MaxLen: (*float64)(nil),
        MinLen: (*float64)(nil),
        Pattern: "",
        Items: (*jschema.Schema)(nil),
        MinItems: (*int)(nil),
        MaxItems: (*int)(nil),
        Required: jschema.Required(nil),
        AdditionalProperties: (*bool)(nil),
        Defs: jschema.Types(nil),
    },
}